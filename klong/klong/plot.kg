:"curve-plotting functions, outputting EPS"
:"try kg -q -l stat -l plot -e 'aplot(cdf;-4;4)' >cdf.eps"

.comment("*****")
frame([x0 xn sx];[y0 yn sy])  draw a frame with coordinates
                              sx,sy = coordinate step
grid([x0 xn sx];[y0 yn sy])   like frame, but with a grid
cframe([x ...];[y0 yn sy])    like frame, but with category names x...
cgrid([x ...];[y0 yn sy])     like grid, but with category names x...
plot(fn)                      plot function in a given frame/grid
area(x0;xn;b)                 fill area x0..xn below a plotted curve
                              b = base line (mostly 0)
vline(x)                      plot the value of a fn as a vertical line at x
barplot(data)                 plot bar graph from data in frame/grid
bar(x;y;n)                    re-plot x'th bar of n-bar graph with height y
scplot(data)                  plot scatter graph from data in frame/grid
scplot2(data)                 scatter-plot pairs [x y]... in frame/grid
errplot(x;fn)                 plot error bars for pair in x given model fn
errbar([x y];fn)              plot an error bar from x/y to x/fn(x)
text(x;y;text)                insert text into diagram; x,y in 0..499
ctext(x;y;text)               insert centered text
rtext(x;y;text)               insert right-aligned text
draw()                        finish drawing; not required with aplot
aplot(fn;x0;xn)               draw auto-scaled grid and plot function
color()                       use orange for filling areas (default)
gray()                        use gray for filling areas
setfill(x)                    set custom fill color (DEPRECATED)
fillgray(x)                   set fill color to x% gray (0=black, 1=white)
fillrgb(r;g;b)                set fill color to the given RGB values (0<=x<=1)
setfont(x)                    set font (Postscript font name)
setgrid(x)                    set grid density (3=dense, 7=sparse)
setline(x)                    set line pattern (0..4)
setres(x)                     set X resolution to x (Z%10..Z)
settext(x)                    set font size in pts
setdot(x)                     set scatter dot size (default: 3)
key0(x)                       key text for line pattern 0
...
key4(x)                       key text for line pattern 4
desc0(x)                      first line of description text
...
desc4(x)                      last line of description text

Example: frame([-4 4 1];[0 16 1]);plot({x^2});area(0;3;0);draw()
*****

.module(:plot)
Fun::0
X0::Xn::Y0::Yn::0
Tx::Ty::0
S::[]
Fm::[]
Fo::"Times-Bold"
Fs::14
Ds::3
Gt::3
Z::500  :"canvas size"
R::200  :"resolution"
Xoff::50
Yoff::25
Rnd::0
coord::{.d(Xoff+x*Z%R);.d(" ");.d(Yoff+y*Z%R)}
mt::{coord(x;y);.p(" moveto")}
lt::{coord(x;y);.p(" lineto")}
mta::{.d(Xoff+x);.d(" ");.d(Yoff+y);.p(" moveto")}
lta::{.d(Xoff+x);.d(" ");.d(Yoff+y);.p(" lineto")}
mte::{.d(Xoff+Z);.d(" ");.d(Yoff+0);.p(" moveto")}
stroke::{:[x;.p("closepath");[]];.p("stroke")}
framebox::{mta(0;0);
           lta(0;Z);
           lta(Z;Z);
           lta(Z;0);
           stroke(1)}
prolog::{.p("%!PS-Adobe-3.0");
         .d("%%BoundingBox: 0 0 ");.d(Z+2*Xoff);.d(" ");.p(Z+2*Yoff);
         .d("/Z ");.d(Z);.p(" def");
         .d("/Xoff ");.d(Xoff);.p(" def");
         .d("/Yoff ");.d(Yoff);.p(" def");
         .p("newpath");
         .p("0 setlinecap");
         .p("0 setlinejoin");
         .p("2 setlinewidth");
         pstext(Fs);
         framebox();
         []}
pp::{.d'x;.p("")}
xmark::{pp("dup stringwidth pop 2 div ",x," exch sub ",Xoff,
           " add ",Yoff," ",Fs," sub moveto")}
ymark::{pp("dup stringwidth pop 46 exch sub ",x," ",Yoff," add moveto")}
xgrid::{pp((x+Xoff)," ",Yoff," moveto");
        pp((x+Xoff)," ",(Z+Yoff)," lineto");
        xmark(x)}
nxgrid::{pp((x+Xoff)," ",Yoff," moveto");
         pp((x+Xoff)," ",(Z+Yoff)," lineto");
         pp(" pop <>")}
ygrid::{pp(Xoff," ",(x+Yoff)," moveto");
        pp((Z+Xoff)," ",(x+Yoff)," lineto");
        ymark(x)}
pstext::{.p("/",Fo," findfont");.d(Fs::x);.p(" scalefont setfont")}
settext::{Fs::x}
setgrid::{Gt::x}
setdot::{Ds::x}
scale::{[s sn sx xx nn grid];
        s::x@2;xx::Z%(%s)*nn::#(x@1)-*x;grid::y;
        .p("newpath");
        pstext(Fs-2);
        .p("1 setlinecap");
        .p("1 setlinejoin");
        .p("[0 ",($Gt),"] 0 setdash");
        .p("1 setlinewidth");
        sn::*x+0.0;
        sx::0.0;
        (1+_nn%s){x;.d(:[Rnd;rndn(sn;Rnd);sn]);.p(" 20 string cvs");
                  grid(sx);.p("show");
                  sn::sn+s;sx::sx+xx}:*0;
        pstext(Fs+2);
        stroke(0);
        .p("[] 0 setdash")}
ascale::{[r];r::y-x;Rnd:::[r<1;_2+#ln(r)%2;3];scale(x,y,r%10;z)}
cats::{[s];s::Z%#x;(!#x){ctext((s%2)+x*s;-15;y)}'x}
newpath::{.p("newpath")}
fill::{.p(" ",Fm," fill 0 setgray")}
cfill::{.p("closepath");fill()}
setfill::{Fm::x}
setres::{R::x}
setline::{:[0=x;.p("[] 0 setdash")
          :|1=x;.p("[4 4] 0 setdash")
          :|2=x;.p("[2 4] 0 setdash")
          :|3=x;.p("[4 3 1 3] 0 setdash")
          ;.p("[1 3 1 3 5 3] 0 setdash")]}
setfont::{Fo::x}
fillgray::{setfill(($x)," setgray")}
fillrgb::{setfill(($x)," ",($y)," ",($z)," setrgbcolor")}
gray::{fillgray(0.7)}
color::{fillrgb(1.0;0.75;0)}
epilog::{.p("showpage");[]}
run::{[a b f];Fun::f::x;a::R%#z-y;b::y;{f((x%a)+b)}'!R}
aplot::{[r l h];r::run(x;y;z);h::R%(|/r)-l::&/r;
       prolog();ascale(y;z;xgrid);ascale(l;|/r;ygrid);
       mt(0;0);(!R){lt(x;h*y-l)}'r;mte();stroke(1);epilog()}
grid::{prolog();scale((X0::*x),(Xn::x@1),Tx::x@2;xgrid);
                scale((Y0::*y),(Yn::y@1),Ty::y@2;ygrid)}
frame::{prolog();scale((X0::*x),(Xn::x@1),Tx::x@2;xmark);
                 scale((Y0::*y),(Yn::y@1),Ty::y@2;ymark)}
cframe::{prolog();cats(x);X0::1;Xn::1+#x;
         scale((Y0::*y),(Yn::y@1),Ty::y@2;ymark)}
cgrid::{prolog();cats(x);scale((X0::1),(Xn::1+#x),1;nxgrid);
        scale((Y0::*y),(Yn::y@1),Ty::y@2;ygrid)}
replot::{[r h];h::R%#Yn-Y0;newpath();.p("1 setlinecap 1 setlinejoin");
         mt(0;0);(!R){lt(x;h*y-Y0)}'S;mte();stroke(1)}
plot::{S::run(x;X0;Xn);replot()}
box::{newpath();mt(x;0);lt(x;y);lt(x+z;y);lt(x+z;0)}
fillbox::{box(x;y;z);cfill();box(x;y;z);stroke(1)}
barplot::{[w h];w::R%#x-X0;h::R%#Yn-Y0;(!#x){fillbox(x*w;y*h;w)}'x;framebox()}
bar::{[w h];w::R%z;h::R%#Yn-Y0;fillbox(x*w;y*h;w)}
barplot::{[s];s::#x;(!s){bar(x;y;s)}'x;framebox()}
arc::{.p(" 0 360 arc closepath ")}
circle::{newpath();coord(x;y);.d(" ");.d(Ds);arc();fill();
         newpath();coord(x;y);.d(" ");.d(Ds);arc();stroke(0)}
barplot::{[w h];w::R%#x;h::R%#Yn-Y0;(!#x){fillbox(x*w;y*h;w)}'x;framebox()}
scplot::{[w h];w::R%#x-X0;h::R%#Yn-Y0;
          (0.5+(!#x)+X0){circle(w*x-X0;h*y-Y0)}'x;stroke(0)}
scplot2::{[w];w::R%#Xn-X0;h::R%#Yn-Y0;
          (*'x){circle(w*x-X0;h*y-Y0)}'{x@1}'x;stroke(0)}
vline::{[w h];newpath();w::R%#Xn-X0;h::R%#Yn-Y0;
        mt(w*x-X0;h*-Y0);lt(w*x-X0;h*Fun(x)-Y0);stroke(0)}
errbar::{[w h xx yy fn];newpath();w::R%#Xn-X0;h::R%#Yn-Y0;xx::*x;yy::x@1;fn::y;
         mt(w*xx-X0;h*yy-Y0);lt(w*xx-X0;h*fn(xx)-Y0);stroke(0)}
errplot::{[mod];mod::y;{errbar(x;mod)}'x}
run::{[a b f];Fun::f::x;a::R%#z-y;b::y;{f((x%a)+b)}'!R}
area::{[r h u v x0 xn];h::R%#Yn-Y0;u::R%#Xn-X0;v::(R%#Yn-Y0)*z-Y0;
       x0::u*x-X0;xn::u*y-X0;
       newpath();mt(x0;v);
       (!R){:[~(x<x0)|x>xn;lt(x;h*y-Y0);[]]}'S;lt(xn;v);cfill();
       replot();framebox()}
xc::"0123456789ABCDEF"
hextext::{,/{(xc@_(#x)%16),xc@_(#x)!16}'x}
text::{mta(x;y);.d("<",hextext(z),">");.p("show")}
ctext::{mta(x;y);.d("<",hextext(z),">");
        .p(" dup stringwidth pop 2 div neg 0 rmoveto show")}
rtext::{mta(x;y);.d("<",hextext(z),">");
        .p(" dup stringwidth pop neg 0 rmoveto show")}
title::{[s];pstext(_1.5*s::Fs);rtext(Z-10;Z-Fs;x);pstext(s)}
lkey::{mta(Z-45;(Z-3*Fs)-(Fs*x)-Fs%3);setline(x);.p("35 0 rlineto stroke")}
key0::{rtext(Z-50;Z-3*Fs;x);lkey(0)}
key1::{rtext(Z-50;Z-4*Fs;x);lkey(1)}
key2::{rtext(Z-50;Z-5*Fs;x);lkey(2)}
key3::{rtext(Z-50;Z-6*Fs;x);lkey(3)}
key4::{rtext(Z-50;Z-7*Fs;x);lkey(4)}
desc0::{rtext(Z-15;Z-3*Fs;x)}
desc1::{rtext(Z-15;Z-4*Fs;x)}
desc2::{rtext(Z-15;Z-5*Fs;x)}
desc3::{rtext(Z-15;Z-6*Fs;x)}
desc4::{rtext(Z-15;Z-7*Fs;x)}
draw::epilog
.module(0)
color()
